## the SNP vcf with the SNPs was generated by Minadakis et al. 2023:
##Â Bdis332_SNPs_Yann_final.vcf.gz

gunzip Bdis332_SNPs_Yann_final.vcf.gz 
sed '1,46d' Bdis332_SNPs_Yann_final.vcf > Bdis332_SNPs_Yann_body

## Adjust header:
sed -i -e 's/Arm-Arm-3i/SRR4162886/g' head_Yann
sed -i -e 's/Geo-G33i6/SRR4162889/g' head_Yann
sed -i -e 's/Alb-AL1A/SRR4162891/g' head_Yann
sed -i -e 's/Geo-G34i2/SRR4162895/g' head_Yann
sed -i -e 's/Alb-AL2E/SRR4162898/g' head_Yann
sed -i -e 's/Geo-G31i4/SRR4162905/g' head_Yann
sed -i -e 's/Geo-G30i2/SRR4162906/g' head_Yann
sed -i -e 's/Geo-G33i4/SRR4162908/g' head_Yann
sed -i -e 's/Arm-Arm-2B/SRR4162910/g' head_Yann
sed -i -e 's/Alb-AL2F/SRR4162911/g' head_Yann
sed -i -e 's/Alb-AL2D/SRR4162913/g' head_Yann
sed -i -e 's/Arm-Arm-3A/SRR4162914/g' head_Yann
sed -i -e 's/Geo-G34i6/SRR4162917/g' head_Yann
sed -i -e 's/Ita-Sic-BNT4/SRR4162919/g' head_Yann
sed -i -e 's/Ita-Sic-CSR6/SRR4162922/g' head_Yann
sed -i -e 's/Ita-Sic-LPA3/SRR4162932/g' head_Yann
sed -i -e 's/Ita-Sic-CSR7/SRR4162933/g' head_Yann
sed -i -e 's/Ita-Sic-SLZ2/SRR4162934/g' head_Yann
sed -i -e 's/Spa-Nor-S11D/SRR4162935/g' head_Yann
sed -i -e 's/Spa-Nor-S12B/SRR4162938/g' head_Yann
sed -i -e 's/Spa-Sou-AB3_3/SRR4162939/g' head_Yann
sed -i -e 's/Spa-Nor-S16D/SRR4162940/g' head_Yann
sed -i -e 's/Spa-Nor-S11A/SRR4162941/g' head_Yann
sed -i -e 's/Spa-Sou-CU_5/SRR4162942/g' head_Yann
sed -i -e 's/Spa-Nor-S11B/SRR4162943/g' head_Yann
sed -i -e 's/Spa-Nor-S19A/SRR4162944/g' head_Yann
sed -i -e 's/Spa-Nor-S6E/SRR4162945/g' head_Yann
sed -i -e 's/Spa-Nor-S6B/SRR4162946/g' head_Yann
sed -i -e 's/Spa-Nor-S22B/SRR4162947/g' head_Yann
sed -i -e 's/Spa-Sou-AB1_4/SRR4162948/g' head_Yann
sed -i -e 's/Spa-Sou-GR6_4/SRR4162949/g' head_Yann
sed -i -e 's/Spa-Nor-S17D/SRR4162950/g' head_Yann
sed -i -e 's/Spa-Nor-S6D/SRR4162951/g' head_Yann
sed -i -e 's/Spa-Nor-S22C/SRR4162953/g' head_Yann
sed -i -e 's/Spa-Sou-CU1_6/SRR4162954/g' head_Yann
sed -i -e 's/Spa-Sou-HU3_4/SRR4162955/g' head_Yann
sed -i -e 's/Spa-Sou-J4_3/SRR4162956/g' head_Yann
sed -i -e 's/Spa-Sou-J6_2/SRR4162959/g' head_Yann
sed -i -e 's/Spa-Sou-Sg2_1/SRR4162960/g' head_Yann
sed -i -e 's/Spa-Sou-Z3_6/SRR4162961/g' head_Yann
sed -i -e 's/Spa-SouGR3_6/SRR4162962/g' head_Yann
sed -i -e 's/Ita-Sic-BNT3/SRR4236033/g' head_Yann
sed -i -e 's/Ita-Sic-BNT8/SRR4235992/g' head_Yann
sed -i -e 's/Kah-6/SRR4163274/g' head_Yann
sed -i -e 's/Koz-2/SRR4163275/g' head_Yann
sed -i -e 's/Koz-5/SRR4163276/g' head_Yann
sed -i -e 's/Spa-GU5_1/SRR4235987/g' head_Yann
sed -i -e 's/Tek-9/SRR4163271/g' head_Yann
sed -i -e 's/Ukr-Nvk1/SRR4235993/g' head_Yann
sed -i -e 's/Adi-15/SRR4162963/g' head_Yann
sed -i -e 's/Adi-4/SRR4163268/g' head_Yann
sed -i -e 's/Adi-9/SRR4164010/g' head_Yann
sed -i -e 's/Arm-Arm-3G/SRR4164026/g' head_Yann
sed -i -e 's/BdTR10D/SRR4164047/g' head_Yann
sed -i -e 's/BdTR11E/SRR4164006/g' head_Yann
sed -i -e 's/BdTR12B/SRR4164022/g' head_Yann
sed -i -e 's/BdTR13B/SRR4163278/g' head_Yann
sed -i -e 's/BdTR13N/SRR4163272/g' head_Yann
sed -i -e 's/Geo-G32i2/SRR4235973/g' head_Yann
sed -i -e 's/Gaz-1/SRR4163273/g' head_Yann
sed -i -e 's/Gaz-2/SRR4164011/g' head_Yann
sed -i -e 's/Gaz-7/SRR4163270/g' head_Yann
sed -i -e 's/BdTR9M/SRR4163277/g' head_Yann
sed -i -e 's/BdTR5A/SRR4163269/g' head_Yann
sed -i -e 's/BdTR3M/SRR4164007/g' head_Yann

cat head_Yann Bdis332_SNPs_Yann_body > Bdis332_SNPs_Yann_for_merge.vcf

## Adjust ref name:
sed -i -e 's/Bd21_Stritt/Bd21/g' Bdis326_clean_TE_call_TEPID.vcf
grep -v "scaffold\|Bd1_centromere_containing_Bradi1g" Bdis326_clean_TE_call_TEPID.vcf > For_Yann_clean_TE_call_TEPID_Bd1_to_Bd5.vcf

## make sure no site is duplicated:
## For sites that are present in the TE vcf and SNP vcf, the position in the TE vcf will be adjusted so that it dose not overlap with a SNP.
cut -f 1-2 Bdis332_SNPs_Yann_for_merge.vcf | grep -v "#" | tr "\t" "_" > position_Yann
cut -f 1-2 For_Yann_clean_TE_call_TEPID_Bd1_to_Bd5.vcf | grep -v "#" | tr "\t" "_" > position_TE
cat position_Yann position_TE | sort | uniq -c | grep -v "1 " > duplicated_sites

## in R
R

library(vcfR, lib.loc = "./R_packages/")
library(memuse, lib.loc = "./R_packages/")

vcf <- read.vcfR("./For_Yann_clean_TE_call_TEPID_Bd1_to_Bd5.vcf", verbose = FALSE )
duplicated_sites <- read.table("./duplicated_sites", header = FALSE, stringsAsFactors = FALSE)
position_Yann <- read.table("./position_Yann", header = FALSE, stringsAsFactors = FALSE, sep = "_")

position_TE <- read.table("./position_TE", header = FALSE, stringsAsFactors = FALSE, sep = "_")
position_all <- rbind(position_Yann,position_TE)

new_position <- matrix(NA, ncol = 2, nrow = sum(as.numeric(duplicated_sites[,1])))
new_position <- matrix(NA, ncol = 2, nrow = 2)

for (i in 1:dim(duplicated_sites)[1]) {
  print(i/dim(duplicated_sites)[1])
  my_add <- 0
  my_rep <- duplicated_sites[i,1]
  my_scaff <- unlist(strsplit(duplicated_sites[i,2], split = "_"))[1]
  my_pos <- unlist(strsplit(duplicated_sites[i,2], split = "_"))[2]
  n_to_replace <- length(vcf@fix[vcf@fix[,1] == my_scaff & vcf@fix[,2] == my_pos,1])
  line_to_replace <- c(1:dim(vcf@fix)[1])[vcf@fix[,1] == my_scaff & vcf@fix[,2] == my_pos]
  
  if (my_rep == n_to_replace) {
    for (j in 2:n_to_replace) {
      if (my_add == 0) {
        my_new_pos <- as.numeric(my_pos) + j - 1 + my_add
      } else {my_new_pos <- as.numeric(my_pos) + j - 1}
      r <- 1
      while(length(c(position_all[position_all[,1] == my_scaff & position_all[,2] == my_new_pos,1], new_position[new_position[,1] == my_scaff & new_position[,2] == my_new_pos & !is.na(new_position[,1]),1])) > 0 & r < 100){
        my_new_pos <- my_new_pos + 1
        r <- r +1
      }
      if (r < 100) {
        vcf@fix[line_to_replace[j],2] <- my_new_pos
        new_position <- rbind(new_position, c(my_scaff, my_new_pos))
        my_add <- r
      } else  {print("Position not found")}
    }
  } else{
    for (j in 1:n_to_replace) {
      if (my_add == 0) {
        my_new_pos <- as.numeric(my_pos) + j + my_add
      } else {my_new_pos <- as.numeric(my_pos) + j}
      r <- 1
      while(length(c(position_all[position_all[,1] == my_scaff & position_all[,2] == my_new_pos,1], new_position[new_position[,1] == my_scaff & new_position[,2] == my_new_pos & !is.na(new_position[,1]),1])) > 0 & r < 100){
        my_new_pos <- my_new_pos + 1
        r <- r +1
      }
      if (r < 100) {
        vcf@fix[line_to_replace[j],2] <- my_new_pos
        new_position <- rbind(new_position, c(my_scaff, my_new_pos))
        my_add <- r
      } else  {print("Position not found")}
    }
  }
}

write.vcf(vcf, "./For_Yann_clean_TE_call_TEPID_Bd1_to_Bd5_corrected_positions.vcf.gz")

## end R 

gunzip For_Yann_clean_TE_call_TEPID_Bd1_to_Bd5_corrected_positions.vcf.gz

cut -f 1-2 For_Yann_clean_TE_call_TEPID_Bd1_to_Bd5_corrected_positions.vcf | grep -v "#" | tr "\t" "_" > position_TE_2
cat position_Yann position_TE_2 | sort | uniq -c | grep -v "1 " > duplicated_sites

rm position_Yann position_TE position_TE_2 duplicated_sites

## sort vcf 
vcf-sort For_Yann_clean_TE_call_TEPID_Bd1_to_Bd5_corrected_positions.vcf > For_Yann_clean_TE_call_TEPID_Bd1_to_Bd5_corrected_positions_sorted.vcf

## index vcf
gatk IndexFeatureFile -F ./For_Yann_clean_TE_call_TEPID_Bd1_to_Bd5_corrected_positions_sorted.vcf
gatk IndexFeatureFile -F ./Bdis332_clean_TIP_call_TEPID.vcf
gatk IndexFeatureFile -F ./Bdis332_clean_TAP_call_TEPID.vcf
gatk IndexFeatureFile -F ./Bdis332_SNPs_Yann_for_merge.vcf


## merge SNP and TEs
gatk MergeVcfs -I Bdis332_SNPs_Yann_for_merge.vcf -I For_Yann_clean_TE_call_TEPID_Bd1_to_Bd5_corrected_positions_sorted.vcf -O Bdis332_SNPs_Yann_clean_TE_TEPID.vcf

gzip Bdis332_SNPs_Yann_clean_TE_TEPID.vcf

